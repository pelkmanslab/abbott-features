{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Measure Features",
      "category": "Measurement",
      "tags": [
        "3D",
        "Morphology",
        "Intensity",
        "Distance",
        "Colocalization",
        "regionprops",
        "itk",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates **morphology**, **intensity**, **distance**, and **colocalization features** for objects in a 3D label image.\n- Supports **2D (not tested) and 3D measurements** across multiple regions of interest (ROIs).\n\n### Outputs\n- A  **feature table** saved in the OME-Zarr structure with .parquet backend.\n  - Morphology features \n  - Intensity features (e.g., mean, max, min intensity per object).\n  - Distance features (e.g., densities and number of neighbours).\n- Updated ROI metadata with border and well location information.\n\n### Limitations\n- Does not support measurements for label images that do not have the same resolution as the intensity images.",
      "executable_parallel": "fractal_tasks/measure_features.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "$defs": {
          "ChannelInputModel": {
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            },
            "title": "ChannelInputModel",
            "type": "object"
          },
          "ChannelPairInputModel": {
            "description": "Get channel pair to measure colocalization features.",
            "properties": {
              "channel0": {
                "$ref": "#/$defs/ChannelInputModel",
                "title": "Channel0"
              },
              "channel1": {
                "$ref": "#/$defs/ChannelInputModel",
                "title": "Channel1"
              }
            },
            "required": [
              "channel0",
              "channel1"
            ],
            "title": "ChannelPairInputModel",
            "type": "object"
          },
          "ColocalizationFeaturesInputModel": {
            "description": "Get channel pair(s) to measure colocalization features.",
            "properties": {
              "channel_pair": {
                "items": {
                  "$ref": "#/$defs/ChannelPairInputModel"
                },
                "title": "Channel Pair",
                "type": "array"
              }
            },
            "required": [
              "channel_pair"
            ],
            "title": "ColocalizationFeaturesInputModel",
            "type": "object"
          },
          "DistanceFeaturesInputModel": {
            "description": "Get label_name of label image to measure distance to.",
            "properties": {
              "label_name_to": {
                "title": "Label Name To",
                "type": "string"
              }
            },
            "title": "DistanceFeaturesInputModel",
            "type": "object"
          },
          "IntensityFeaturesInputModel": {
            "description": "Get intensity features to measure.",
            "properties": {
              "channels_to_include": {
                "items": {
                  "$ref": "#/$defs/ChannelInputModel"
                },
                "title": "Channels To Include",
                "type": "array"
              },
              "channels_to_exclude": {
                "items": {
                  "$ref": "#/$defs/ChannelInputModel"
                },
                "title": "Channels To Exclude",
                "type": "array"
              }
            },
            "title": "IntensityFeaturesInputModel",
            "type": "object"
          },
          "NeighborhoodFeaturesInputModel": {
            "description": "Get label_name of label image to measure neighborhood in.",
            "properties": {
              "measure": {
                "default": false,
                "title": "Measure",
                "type": "boolean"
              },
              "label_img_mask": {
                "title": "Label Img Mask",
                "type": "string"
              }
            },
            "title": "NeighborhoodFeaturesInputModel",
            "type": "object"
          },
          "TimeDecayInputModel": {
            "description": "Get the path to the time decay table and the correction Factor to use.",
            "properties": {
              "correction_factor": {
                "enum": [
                  "correctionFactor-Exp",
                  "correctionFactor-ExpNoOffset",
                  "correctionFactor-Linear",
                  "correctionFactor-LogLinear"
                ],
                "title": "Correction Factor",
                "type": "string"
              },
              "table_name": {
                "title": "Table Name",
                "type": "string"
              }
            },
            "title": "TimeDecayInputModel",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Absolute path to the OME-Zarr image."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label image to be measured."
          },
          "parent_label_names": {
            "items": {
              "type": "string"
            },
            "title": "Parent Label Names",
            "type": "array",
            "description": "List of parent label names relative to child `label_name`. If provided, the task will assign child labels to their parent labels based on overlap. This is useful for hierarchical label images e.g. embryo -> cells -> nuclei."
          },
          "reference_acquisition": {
            "title": "Reference Acquisition",
            "type": "integer",
            "description": "The reference acquisition that contains the label image and table to perform the measurement on. If not provided, the task assumes that each acquisition has its own label image and table."
          },
          "level": {
            "default": "0",
            "title": "Level",
            "type": "string",
            "description": "Level of the OME-Zarr label to copy from. Valid choices are \"0\", \"1\", etc. (depending on which levels are available in the OME-Zarr label)."
          },
          "measure_label_features": {
            "default": false,
            "title": "Measure Label Features",
            "type": "boolean",
            "description": "Whether to measure label features."
          },
          "measure_intensity_features": {
            "allOf": [
              {
                "$ref": "#/$defs/IntensityFeaturesInputModel"
              }
            ],
            "title": "Measure Intensity Features",
            "description": "From which channels intensity features should be measured. If not provided, the task will not measure any intensity features."
          },
          "measure_distance_features": {
            "allOf": [
              {
                "$ref": "#/$defs/DistanceFeaturesInputModel"
              }
            ],
            "title": "Measure Distance Features",
            "description": "If `label_name_to` is provided, the task will measure distance features of `label_name` relative to `label_name_to` e.g. `embryo` or `organoid` segmentation."
          },
          "measure_colocalization_features": {
            "allOf": [
              {
                "$ref": "#/$defs/ColocalizationFeaturesInputModel"
              }
            ],
            "title": "Measure Colocalization Features",
            "description": "If `channel_pair` is set, the task will measure colocalization features per channel pair. E.g. colocalization between `channel_0` and `channel_1`."
          },
          "measure_neighborhood_features": {
            "allOf": [
              {
                "$ref": "#/$defs/NeighborhoodFeaturesInputModel"
              }
            ],
            "default": {
              "measure": false,
              "label_img_mask": null
            },
            "title": "Measure Neighborhood Features",
            "description": "If `measure` is set to True, neighborhood features will be measured. If neighborhood is measured in e.g. `embryo` or `organoid` segmentation provide the `label_img_mask`."
          },
          "z_decay_correction": {
            "title": "Z Decay Correction",
            "type": "string",
            "description": "Name of z-decay model to use. Models are stored in /path_to_zarr_plate/models/z_decay/ . "
          },
          "t_decay_correction": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeDecayInputModel"
              }
            ],
            "title": "T Decay Correction",
            "description": "Takes the time decay correction factor `correction_factor` and `table_name` of the dataframe that contains the correction factors."
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to measure label features. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "use_masks": {
            "default": true,
            "title": "Use Masks",
            "type": "boolean",
            "description": "If `True`, try to use masked loading and fall back to `use_masks=False` if the ROI table is not suitable. Masked loading is relevant when only a subset of the bounding box should actually be processed (e.g. running within `organoid_ROI_table`)."
          },
          "masking_label_name": {
            "title": "Masking Label Name",
            "type": "string",
            "description": "Name of the masking label image to use for masked loading e.g. `embryo`."
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output feature table."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite an existing output feature table."
          }
        },
        "required": [
          "zarr_url",
          "label_name",
          "ROI_table_name"
        ],
        "type": "object",
        "title": "MeasureFeatures"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    },
    {
      "name": "Get Cellvoyager Time Decay",
      "category": "Measurement",
      "modality": "HCS",
      "tags": [
        "3D",
        "Yokogawa",
        "Intensity Correction",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates time-decay correction factors per ROI, channel and acquisition to correct for acquisition bias dependent intensity decay (aka imaging snake).\n- Time decay models can be of type Exp, ExpNoOffset, Linear and LogLinear calculated with linear loss.\n- Supports **2D (not tested) and 3D measurements** across multiple regions of interest (ROIs).\n\n### Outputs\n- A  **generic table** saved in the OME-Zarr plate /path_to_ome_zarr_fld/tables with .parquet backend.\n- Two plots saved in /path_to_ome_zarr_fld/__plots : \n1. `equivalent_spherical_radius_cutoff` - adjustable via the `spherical_radius_cutoff` parameter used for outlier removal.\n2. `time_decay_models` - fitted time decay correction models for each channel label\n\n### Limitations\n- This task only supports time-decay correction for images from CellVoyager microscopes.",
      "executable_non_parallel": "fractal_tasks/cellvoyager_time_decay.py",
      "meta_non_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "$defs": {
          "AcquisitionFolderInputModel": {
            "description": "Get the acquisition id and the path to the directory containing",
            "properties": {
              "acquisition": {
                "title": "Acquisition",
                "type": "integer"
              },
              "image_dir": {
                "title": "Image Dir",
                "type": "string"
              }
            },
            "required": [
              "acquisition",
              "image_dir"
            ],
            "title": "AcquisitionFolderInputModel",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server. Not used in this task.)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "acquisition_params": {
            "items": {
              "$ref": "#/$defs/AcquisitionFolderInputModel"
            },
            "title": "Acquisition Params",
            "type": "array",
            "description": "A list of `AcquisitionFolderInputModel` s, taking the acquisition int and path to the folder that contains the Cellvoyager image files and the MeasurementData & MeasurementDetail metadata files."
          },
          "mrf_filename": {
            "default": "MeasurementDetail.mrf",
            "title": "Mrf Filename",
            "type": "string",
            "description": "Name of the .mrf file. Default is \"MeasurementDetail.mrf\"."
          },
          "mlf_filename": {
            "default": "MeasurementData.mlf",
            "title": "Mlf Filename",
            "type": "string",
            "description": "Name of the .mlf file. Default is \"MeasurementData.mlf\"."
          },
          "feature_table_name": {
            "default": "nuclei",
            "title": "Feature Table Name",
            "type": "string",
            "description": "Name of the feature table to be used for time decay calculations calculated in \"Measure Features\" task e.g. \"nuclei\"."
          },
          "label_name": {
            "default": "nuclei",
            "title": "Label Name",
            "type": "string",
            "description": "Name of the label image to be used for time decay calculations. Should match the label_name used in the \"Measure Features\" task."
          },
          "spherical_radius_cutoff": {
            "default": [
              4,
              8
            ],
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Spherical Radius Cutoff",
            "type": "array",
            "description": "Tuple of floats defining the lower and upper cutoff for the equivalent spherical radius of the objects to be included in the time decay models (to exclude e.g. bright mitotic cells that could shift the embryo's mean intensity). Default is (4, 8)."
          },
          "control_wells": {
            "items": {
              "type": "string"
            },
            "title": "Control Wells",
            "type": "array",
            "description": "List of wells to be excluded from the time decay models. If None, no wells are excluded. E.g. [\"B03\", \"B04\"]."
          },
          "alignment_score_cutoff": {
            "default": 0.8,
            "title": "Alignment Score Cutoff",
            "type": "number",
            "description": "Float value to filter out misaligned cells based on the alignment score. Default is 0.8."
          },
          "save_timepoints_table": {
            "default": true,
            "title": "Save Timepoints Table",
            "type": "boolean",
            "description": "Whether to save the acquisition timepoints table. Not needed by downstream tasks. Default is True."
          },
          "time_decay_table_name": {
            "default": "time_decay_models",
            "title": "Time Decay Table Name",
            "type": "string",
            "description": "Name of the output time decay models table."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite an existing output time decay table."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "acquisition_params"
        ],
        "type": "object",
        "title": "CellvoyagerTimeDecay"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    },
    {
      "name": "Get Z Decay Models",
      "category": "Measurement",
      "modality": "HCS",
      "tags": [
        "3D",
        "Intensity Correction",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates z-decay correction models per channel label to correct intensity decay across z.\n- Z decay models can be of type Exp, Linear and LogLinear calculated with linear or huber loss. For each type, z decay bias is corrected either 1D or 2D (by partioning light path into medium and sample path).\n- Z decay models are available in three types: Exponential (Exp), Linear, and LogLinear, each computed using either linear or Huber loss. For all model types, z-decay bias correction models are saved as 1D (uniform correction across the entire light path) and 2D mode (with light path divided into medium path and sample path).\n\n### Outputs\n- Z-decay models saved in the OME-Zarr plate /path_to_ome_zarr_fld/models/z_decay/ \n- Plots saved in /path_to_ome_zarr_fld/models/__plots containing overview of \n1. `overview__one_step` / `overview__two_step` - 1D & 2D decay models fit to channels.\n2. `equivalent_spherical_radius_cutoff` - adjustable via the `spherical_radius_cutoff` parameter used for outlier removal.\n3. `roundness_cutoff` - adjustable via the `roundness_cutoff` parameter used for outlier removal.\n",
      "executable_non_parallel": "fractal_tasks/z_decay.py",
      "meta_non_parallel": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema_non_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server. Not used in this task.)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "feature_table_name": {
            "default": "nuclei",
            "title": "Feature Table Name",
            "type": "string",
            "description": "Name of the feature table to be used for time decay calculations calculated in \"Measure Features\" task e.g. \"nuclei\"."
          },
          "label_name": {
            "default": "nuclei",
            "title": "Label Name",
            "type": "string",
            "description": "Name of the label image to be used for time decay calculations. Should match the label_name used in the \"Measure Features\" task."
          },
          "embryo_label_name": {
            "default": "embryo",
            "title": "Embryo Label Name",
            "type": "string",
            "description": "Optional name of the embryo label image to be used for z-decay two-step models ()"
          },
          "spherical_radius_cutoff": {
            "default": [
              4,
              8
            ],
            "maxItems": 2,
            "minItems": 2,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Spherical Radius Cutoff",
            "type": "array",
            "description": "Tuple of floats defining the lower and upper cutoff for the equivalent spherical radius of the objects to be included in the time decay models (to exclude e.g. bright mitotic cells that could shift the embryo's mean intensity). Default is (4, 8)."
          },
          "roundness_cutoff": {
            "default": 0.8,
            "title": "Roundness Cutoff",
            "type": "number",
            "description": "Missing description"
          },
          "control_wells": {
            "items": {
              "type": "string"
            },
            "title": "Control Wells",
            "type": "array",
            "description": "List of wells to be excluded from the time decay models. If None, no wells are excluded. E.g. [\"B03\", \"B04\"]."
          },
          "alignment_score_cutoff": {
            "default": 0.8,
            "title": "Alignment Score Cutoff",
            "type": "number",
            "description": "Float value to filter out misaligned cells based on the alignment score. Default is 0.8."
          },
          "loss": {
            "default": "huber",
            "enum": [
              "linear",
              "huber"
            ],
            "title": "Loss",
            "type": "string",
            "description": "Missing description"
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite an existing output time decay table."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "type": "object",
        "title": "ZDecay"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Ruth Hornbachner, Maks Hess"
}
