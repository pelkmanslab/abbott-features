{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Measure Label Features",
      "category": "Measurement",
      "tags": [
        "3D",
        "Morphology",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates **morphology features** for objects in a 3D label image.\n- Supports **3D measurements** across multiple regions of interest (ROIs).\n\n### Outputs\n- A **label feature table** saved in the OME-Zarr structure, containing:\n- Morphology features (e.g., size, shape, bounding box coordinates).\n",
      "executable_parallel": "fractal_tasks/measure_label_features.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Absolute path to the OME-Zarr image."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label image to be measured."
          },
          "level": {
            "default": "0",
            "title": "Level",
            "type": "string",
            "description": "Level of the OME-Zarr label to copy from. Valid choices are \"0\", \"1\", etc. (depending on which levels are available in the OME-Zarr label)."
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to measure label features. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "output_table_name": {
            "default": "label_features",
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output feature table."
          }
        },
        "required": [
          "zarr_url",
          "label_name",
          "ROI_table_name"
        ],
        "type": "object",
        "title": "MeasureLabelFeatures"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    },
    {
      "name": "Measure Intensity Features",
      "category": "Measurement",
      "tags": [
        "3D",
        "Morphology",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates **intensity features** for objects in a 3D label image.\n- Supports **3D measurements** across multiple regions of interest (ROIs).\n\n### Outputs\n- An **intensity feature table** saved in the OME-Zarr structure, containing:\n- Intensity features (e.g., mean, median, minimum, maximum, sum etc.)\n",
      "executable_parallel": "fractal_tasks/measure_intensity_features.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "$defs": {
          "ChannelInputModel": {
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            },
            "title": "ChannelInputModel",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Absolute path to the OME-Zarr image."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label image to be measured."
          },
          "channels_to_include": {
            "items": {
              "$ref": "#/$defs/ChannelInputModel"
            },
            "title": "Channels To Include",
            "type": "array",
            "description": "List of channels to include in the measurement."
          },
          "channels_to_exclude": {
            "items": {
              "$ref": "#/$defs/ChannelInputModel"
            },
            "title": "Channels To Exclude",
            "type": "array",
            "description": "List of channels to exclude from the measurement."
          },
          "z_decay_correction": {
            "default": false,
            "title": "Z Decay Correction",
            "type": "boolean",
            "description": "If a z-decay correction model should be applied. Currently not implemented."
          },
          "t_decay_correction": {
            "default": false,
            "title": "T Decay Correction",
            "type": "boolean",
            "description": "If a t-decay correction model should be applied. Currently not implemented."
          },
          "level": {
            "default": "0",
            "title": "Level",
            "type": "string",
            "description": "Level of the OME-Zarr label to copy from. Valid choices are \"0\", \"1\", etc. (depending on which levels are available in the OME-Zarr label)."
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to measure label features. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "output_table_name": {
            "default": "intensity_features",
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output feature table."
          }
        },
        "required": [
          "zarr_url",
          "label_name",
          "ROI_table_name"
        ],
        "type": "object",
        "title": "MeasureIntensityFeatures"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    },
    {
      "name": "Measure Colocalization Features",
      "category": "Measurement",
      "tags": [
        "3D",
        "Morphology",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates **colocalization features** for two channels per object in a 3D label image.\n- Supports **3D measurements** across multiple regions of interest (ROIs).\n\n### Outputs\n- A **colocalization feature table** saved in the OME-Zarr structure, containing:\n- Colocalization features (e.g., pearson-, spearman correlation, mutual information etc.)\n",
      "executable_parallel": "fractal_tasks/measure_colocalization_features.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "$defs": {
          "ChannelInputModel": {
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            },
            "title": "ChannelInputModel",
            "type": "object"
          },
          "ChannelPairInputModel": {
            "description": "Get channel pair to measure colocalization features.",
            "properties": {
              "channel0": {
                "$ref": "#/$defs/ChannelInputModel",
                "title": "Channel0"
              },
              "channel1": {
                "$ref": "#/$defs/ChannelInputModel",
                "title": "Channel1"
              }
            },
            "required": [
              "channel0",
              "channel1"
            ],
            "title": "ChannelPairInputModel",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Absolute path to the OME-Zarr image."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label image to be measured."
          },
          "channel_pairs": {
            "items": {
              "$ref": "#/$defs/ChannelPairInputModel"
            },
            "title": "Channel Pairs",
            "type": "array",
            "description": "List of channel pairs to measure colocalization features."
          },
          "z_decay_correction": {
            "default": false,
            "title": "Z Decay Correction",
            "type": "boolean",
            "description": "TODO"
          },
          "t_decay_correction": {
            "default": false,
            "title": "T Decay Correction",
            "type": "boolean",
            "description": "TODO"
          },
          "level": {
            "default": "0",
            "title": "Level",
            "type": "string",
            "description": "Level of the OME-Zarr label to copy from. Valid choices are \"0\", \"1\", etc. (depending on which levels are available in the OME-Zarr label)."
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to measure label features. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "output_table_name": {
            "default": "colocalization_features",
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of output feature table."
          }
        },
        "required": [
          "zarr_url",
          "label_name",
          "channel_pairs",
          "ROI_table_name"
        ],
        "type": "object",
        "title": "MeasureColocalizationFeatures"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    },
    {
      "name": "Measure Distance Features",
      "category": "Measurement",
      "tags": [
        "3D",
        "Morphology",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates **distance features** for objects in a 3D label image relative to a label mask e.g. nuclei to embryo mask.\n- Supports **3D measurements** across multiple regions of interest (ROIs).\n\n### Outputs\n- A **distance feature table** saved in the OME-Zarr structure, containing:\n- Distance features (e.g., distance to border, distance along axes, etc.)\n",
      "executable_parallel": "fractal_tasks/measure_distance_features.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Absolute path to the OME-Zarr image."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label image to be measured."
          },
          "label_name_to": {
            "title": "Label Name To",
            "type": "string",
            "description": "Name of the label image to measure distance to e.g. \"embryo\" or \"organoid\"."
          },
          "z_decay_correction": {
            "default": false,
            "title": "Z Decay Correction",
            "type": "boolean",
            "description": "If a z-decay correction model should be applied. Currently not implemented."
          },
          "t_decay_correction": {
            "default": false,
            "title": "T Decay Correction",
            "type": "boolean",
            "description": "If a t-decay correction model should be applied. Currently not implemented."
          },
          "level": {
            "default": "0",
            "title": "Level",
            "type": "string",
            "description": "Level of the OME-Zarr label to copy from. Valid choices are \"0\", \"1\", etc. (depending on which levels are available in the OME-Zarr label)."
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to measure label features. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "output_table_name": {
            "default": "distance_features",
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output feature table."
          }
        },
        "required": [
          "zarr_url",
          "label_name",
          "label_name_to",
          "ROI_table_name"
        ],
        "type": "object",
        "title": "MeasureDistanceFeatures"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Ruth Hornbachner, Maks Hess"
}
