{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Measure Features",
      "category": "Measurement",
      "tags": [
        "3D",
        "Morphology",
        "Intensity",
        "Distance",
        "Colocalization",
        "regionprops",
        "itk",
        "Feature Table"
      ],
      "docs_info": "### Purpose\n- Calculates **morphology**, **intensity**, **distance**, and **colocalization features** for objects in a 3D label image.\n- Supports **2D (not tested) and 3D measurements** across multiple regions of interest (ROIs).\n\n### Outputs\n- A  **feature table** saved in the OME-Zarr structure with .parquet backend.\n  - Morphology features \n  - Intensity features (e.g., mean, max, min intensity per object).\n  - Distance features (e.g., densities and number of neighbours).\n- Updated ROI metadata with border and well location information.\n\n### Limitations\n- Does not support measurements for label images that do not have the same resolution as the intensity images.",
      "executable_parallel": "fractal_tasks/measure_features.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "$defs": {
          "ChannelInputModel": {
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            },
            "title": "ChannelInputModel",
            "type": "object"
          },
          "ChannelPairInputModel": {
            "description": "Get channel pair to measure colocalization features.",
            "properties": {
              "channel0": {
                "$ref": "#/$defs/ChannelInputModel",
                "title": "Channel0"
              },
              "channel1": {
                "$ref": "#/$defs/ChannelInputModel",
                "title": "Channel1"
              }
            },
            "required": [
              "channel0",
              "channel1"
            ],
            "title": "ChannelPairInputModel",
            "type": "object"
          },
          "ColocalizationFeaturesInputModel": {
            "description": "Get channel pair(s) to measure colocalization features.",
            "properties": {
              "channel_pair": {
                "items": {
                  "$ref": "#/$defs/ChannelPairInputModel"
                },
                "title": "Channel Pair",
                "type": "array"
              }
            },
            "required": [
              "channel_pair"
            ],
            "title": "ColocalizationFeaturesInputModel",
            "type": "object"
          },
          "DistanceFeaturesInputModel": {
            "description": "Get label_name of label image to measure distance to.",
            "properties": {
              "label_name_to": {
                "title": "Label Name To",
                "type": "string"
              }
            },
            "title": "DistanceFeaturesInputModel",
            "type": "object"
          },
          "IntensityFeaturesInputModel": {
            "description": "Get intensity features to measure.",
            "properties": {
              "channels_to_include": {
                "items": {
                  "$ref": "#/$defs/ChannelInputModel"
                },
                "title": "Channels To Include",
                "type": "array"
              },
              "channels_to_exclude": {
                "items": {
                  "$ref": "#/$defs/ChannelInputModel"
                },
                "title": "Channels To Exclude",
                "type": "array"
              }
            },
            "title": "IntensityFeaturesInputModel",
            "type": "object"
          },
          "NeighborhoodFeaturesInputModel": {
            "description": "Get label_name of label image to measure neighborhood in.",
            "properties": {
              "measure": {
                "default": false,
                "title": "Measure",
                "type": "boolean"
              },
              "label_img_mask": {
                "title": "Label Img Mask",
                "type": "string"
              }
            },
            "title": "NeighborhoodFeaturesInputModel",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Absolute path to the OME-Zarr image."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Label image to be measured."
          },
          "parent_label_names": {
            "items": {
              "type": "string"
            },
            "title": "Parent Label Names",
            "type": "array",
            "description": "List of parent label names relative to child `label_name`. If provided, the task will assign child labels to their parent labels based on overlap. This is useful for hierarchical label images e.g. embryo -> cells -> nuclei."
          },
          "reference_acquisition": {
            "title": "Reference Acquisition",
            "type": "integer",
            "description": "The reference acquisition that contains the label image and table to perform the measurement on. If not provided, the task assumes that each acquisition has its own label image and table."
          },
          "level": {
            "default": "0",
            "title": "Level",
            "type": "string",
            "description": "Level of the OME-Zarr label to copy from. Valid choices are \"0\", \"1\", etc. (depending on which levels are available in the OME-Zarr label)."
          },
          "measure_label_features": {
            "default": false,
            "title": "Measure Label Features",
            "type": "boolean",
            "description": "Whether to measure label features."
          },
          "measure_intensity_features": {
            "$ref": "#/$defs/IntensityFeaturesInputModel",
            "title": "Measure Intensity Features",
            "description": "From which channels intensity features should be measured. If not provided, the task will not measure any intensity features."
          },
          "measure_distance_features": {
            "$ref": "#/$defs/DistanceFeaturesInputModel",
            "title": "Measure Distance Features",
            "description": "If `label_name_to` is provided, the task will measure distance features of `label_name` relative to `label_name_to` e.g. `embryo` or `organoid` segmentation."
          },
          "measure_colocalization_features": {
            "$ref": "#/$defs/ColocalizationFeaturesInputModel",
            "title": "Measure Colocalization Features",
            "description": "If `channel_pair` is set, the task will measure colocalization features per channel pair. E.g. colocalization between `channel_0` and `channel_1`."
          },
          "measure_neighborhood_features": {
            "$ref": "#/$defs/NeighborhoodFeaturesInputModel",
            "default": {
              "measure": false,
              "label_img_mask": null
            },
            "title": "Measure Neighborhood Features",
            "description": "If `measure` is set to True, neighborhood features will be measured. If neighborhood is measured in e.g. `embryo` or `organoid` segmentation provide the `label_img_mask`."
          },
          "z_decay_correction": {
            "title": "Z Decay Correction",
            "type": "string",
            "description": "TODO"
          },
          "t_decay_correction": {
            "title": "T Decay Correction",
            "type": "string",
            "description": "TODO"
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to measure label features. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "use_masks": {
            "default": true,
            "title": "Use Masks",
            "type": "boolean",
            "description": "If `True`, try to use masked loading and fall back to `use_masks=False` if the ROI table is not suitable. Masked loading is relevant when only a subset of the bounding box should actually be processed (e.g. running within `organoid_ROI_table`)."
          },
          "masking_label_name": {
            "title": "Masking Label Name",
            "type": "string",
            "description": "Name of the masking label image to use for masked loading e.g. `embryo`."
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the output feature table."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite an existing output feature table."
          }
        },
        "required": [
          "zarr_url",
          "label_name",
          "ROI_table_name"
        ],
        "type": "object",
        "title": "MeasureFeatures"
      },
      "docs_link": "https://github.com/pelkmanslab/abbott-features"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Ruth Hornbachner, Maks Hess"
}
