# Copyright 2022 (C) Friedrich Miescher Institute for Biomedical Research and
# University of Zurich
#
# Original authors:
# Ruth Hornbachner <ruth.hornbachner@uzh.ch>
#
# This file is part of Fractal and was originally developed by eXact lab S.r.l.
# <exact-lab.it> under contract with Liberali Lab from the Friedrich Miescher
# Institute for Biomedical Research and Pelkmans Lab from the University of
# Zurich.
"""Task to measure label features from an OME-Zarr label image."""

import logging
from pathlib import Path

import numpy as np
import polars as pl
import spatial_image as si
from ngio import open_ome_zarr_container
from ngio.tables.tables_container import write_table
from ngio.tables.v1 import FeatureTableV1
from pydantic import validate_call

from abbott_features.features.constants import (
    DefaultLabelFeature,
)
from abbott_features.features.label import get_label_features

logger = logging.getLogger(__name__)


@validate_call
def measure_label_features(
    *,
    # Default arguments for fractal tasks:
    zarr_url: str,
    # Task-specific arguments:
    label_name: str,
    level: str = "0",
    ROI_table_name: str,
    output_table_name: str = "label_features",
) -> None:
    """Measure features of a label image.

    This tasks loops over the ROIs in a given ROI table and measures features
    of the label image. The features are saved as a .parquet table to be used
    in combination with polars.

    Args:
        zarr_url: Absolute path to the OME-Zarr image.
        label_name: Label image to be measured.
        level: Level of the OME-Zarr label to copy from. Valid choices are
            "0", "1", etc. (depending on which levels are available in the
            OME-Zarr label).
        ROI_table_name: Name of the ROI table over which the task loops to
            measure label features. Examples: `FOV_ROI_table` => loop over
            the field of views, `organoid_ROI_table` => loop over the organoid
            ROI table (generated by another task), `well_ROI_table` => process
            the whole well as one image.
        output_table_name: Name of the output feature table.
        overwrite: Whether to overwrite an existing output table.
    """
    logging.info("Starting measure_label_features task")
    logging.info(f"{zarr_url=}")

    # TODO: allow user to select label features to measure
    features = tuple(DefaultLabelFeature)

    # Open the OME-Zarr container
    ome_zarr_container = open_ome_zarr_container(zarr_url)

    # Loop over the ROIs in ROI table
    roi_table = ome_zarr_container.get_table(ROI_table_name)

    label_img = ome_zarr_container.get_label(label_name, path=level)
    axes_names = label_img.axes_mapper.on_disk_axes_names
    pixel_sizes = label_img.pixel_size.as_dict()

    # Check if the max label value exceeds uint16 range
    # Need to convert to uint16 as itk.LabelImageToShapeLabelMapFilter
    # does not support uint32
    label_img_numpy = label_img.get_array(mode="numpy")
    max_label_value = np.max(label_img_numpy)

    if max_label_value > 65535:  # uint16 max value
        raise ValueError(
            f"Label image contains values ({max_label_value}) that exceed the "
            f" maximum allowed value (65535) for processing with "
            "itk.LabelImageToShapeLabelMapFilter. "
        )
    logging.info(f"Start label feature measurement for {label_name=}")

    num_ROIs = len(roi_table.rois())
    tables = []
    for i_ROI, roi in enumerate(roi_table.rois()):
        logging.info(f"Now processing ROI {i_ROI+1}/{num_ROIs}")
        label_numpy = label_img.get_roi(roi).astype("uint16")

        label_spatial_image = si.to_spatial_image(
            label_numpy,
            dims=axes_names,
            scale=pixel_sizes,
        )

        table_roi = get_label_features(
            label_image=label_spatial_image, ROI_id=roi.name, features=features
        )

        tables.append(table_roi)

    logging.info(f"Finished label feature measurement for {label_name=}")

    # Concatenate all tables
    table_out = pl.concat(tables)

    # Save the output table
    store = Path(f"{zarr_url}/tables/features/{output_table_name}")

    feature_table = FeatureTableV1(table_out, reference_label="label")
    write_table(store=store, table=feature_table, backend="experimental_parquet_v1")


if __name__ == "__main__":
    from fractal_task_tools.task_wrapper import run_fractal_task

    run_fractal_task(task_function=measure_label_features)
